digraph G {
    // configs
    dpi=300
    overlap = false
    splines = true
    nodesep=1 
    graph [fontname = "helvetica"];
    node [fontname = "Arial", fillcolor="#FFE599", style="filled"];

    // nodes
    agent [shape="box", label=<agent>]
    api [shape="box", label=<api>]
    datastore [shape="box", label=<data store>]
    messagequeue [shape="box", label=<message<BR/>queue>]
    consumers [shape="box", label=<consumers>]
    dockerNode [shape="box", label=<docker>]
    dockerServer [shape="box", label=<docker>]
    notifyPlugin [shape="box"]
    publishPlugin [shape="box"]
    checkPlugin [shape="box"]

    // relationships
    consumers -> api [dir="both" label=<http(s)<BR/>ws(s)>]

    subgraph cluster_server {
        label=<<B>server node</B>>
        labeljust="left"
        dockerServer
        
        subgraph cluster_api {
            label=<<B>container</B>>
            labeljust="left"
            api
            messagequeue
            datastore

             api -> messagequeue [dir="both"]
             api -> datastore [dir="both"]

        }

    }

    subgraph cluster_node {
        label=<<B>cluster node N</B>>
        labeljust="left"
        dockerNode

        subgraph cluster_agent {
            label=<<B>container</B>>
            labeljust="left"
            agent
        }

        subgraph cluster_notify {
            label=<<B>container</B>>
            labeljust="left"
            notifyPlugin

           
        }
        dockerNode -> notifyPlugin

        subgraph cluster_publish {
            label=<<B>container</B>>
            labeljust="left"
            publishPlugin

            
        }
        dockerNode -> publishPlugin

        subgraph cluster_check {
            label=<<B>container</B>>
            labeljust="left"
            checkPlugin
        }
        dockerNode -> checkPlugin  

    }

    agent -> api [dir="both" label=<http(s)<BR/>ws(s)>]
    agent -> dockerNode
   
}
